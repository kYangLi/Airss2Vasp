#!/bin/bash
#
# Author: liyang@cmt.tsinghua
# Start Date: 2019.9.23
# Last Update: 2019.9.23
# Description: Calculation Process Check.
#

# Check if in the calc. folder

grep_input_file(){
  keyword="$1"
  res=$(grep "${keyword}" a4v.allparas 2>/dev/null | tail -1 | 
        awk -F '#' '{print $1}' | awk -F '=' '{print $NF}')
  echo ${res}
}

if [ ! -e a4v.input ]; then
  echo '[error] Not in a A4V calculation folder!!!'
  exit -1
fi

# Traverse and Record all Coaches' Info
coach_list=$(find . -maxdepth 1 -name "COACH-*" | sed 's/-/ /g' | sort -n -k 2 | sed 's/ /-/g')
current_coach_num=0
total_cores=0
current_cores=0
cat /dev/null > VASP.log.temp
for coach in ${coach_list}; do 
  cores=$(grep CORES_PER_COACH ${coach}/a4v.allparas | awk -F '=' '{print $2}')
  ((total_cores+=cores))
  if [ -e ${coach}/VASP.log ] && [ ! -e ${coach}/A4VSTOP ]; then 
    cat ${coach}/VASP.log >> VASP.log.temp
    ((current_coach_num++))
    ((current_cores+=cores))
  elif [ -e ${coach}/A4VSTOP ]; then 
    echo "[info] ${coach} has been stoped by user."
  else
    echo "[info] ${coach} not start to work yet..."
  fi
done

# Get some necessary parameters
seed_name=$(grep_input_file 'SEED_NAME')
total_coach_num=$(echo ${coach_list} | wc -w)
total_str_num=$(find POSCAR-POOL/ -maxdepth 1 -name "${seed_name}-*.cell" |
                wc -l)
untouched_str_num=$(find POSCAR-POOL/ -maxdepth 1 -name "${seed_name}-*.vasp" |
                    wc -l)
succeed_str_num=$(find RES-POOL/ -maxdepth 1 -name "${seed_name}-*.res" | wc -l)
error_str_num=$(grep '\[error\]' VASP.log.temp | wc -l)
finished_str_num=$((error_str_num+succeed_str_num))
process_str_num=$((total_str_num-finished_str_num-untouched_str_num))
bad_poscar_str_num=$(grep '\[error\]' VASP.log.temp | 
                     grep 'Bad initial structure' | wc -l)
no_contcar_str_num=$(grep '\[error\]' VASP.log.temp | 
                     grep 'CONTCAR not found' | wc -l)
huge_ediff_str_num=$(grep '\[error\]' VASP.log.temp | 
                     grep 'Too huge EDIFF' | wc -l)
not_conv_str_num=$(grep '\[error\]' VASP.log.temp | 
                   grep 'Not reach the required accuracy' | wc -l)
calc_done=false
color_red='\033[01;31m'
color_green='\033[01;32m'
color_none='\033[0m'
if [ "${total_str_num}" == "${finished_str_num}" ]; then 
  calc_done=true
  run_state="${color_green}[done] Random structure searching done!${color_none}"
else 
  run_state="${color_red}[doing] Random structure searching in progress...${color_none}"
fi
start_time=$(grep '\[start_time\]' VASP.log.temp | awk '{print $2}' | 
             sort -n | head -1)
if ! ${calc_done}; then
  current_time=$(date +%s)
  ((total_time_spend=current_time-start_time))
else
  end_time=$(grep '\[end_time\]' VASP.log.temp | awk '{print $2}' | 
             sort -n | tail -1)
  ((total_time_spend=end_time-start_time))
fi
total_time_spend_format=$(echo ${total_time_spend} | 
                          awk '{print int($1/86400)"d:"\
                                      int($1%86400/3600)"h:"\
                                      int($1%3600/60)"m:"\
                                      $1%60"s"}')
job_is_done_one=$(grep '\[spend_time_raw\]' VASP.log.temp)
average_time_spend=$(grep '\[spend_time_raw\]' VASP.log.temp | 
                     awk -F ':' '{print $2}' |
                     awk '{sum+=$1}END{print sum/NR}')
average_time_spend=${average_time_spend%.*}

if [ -z "${job_is_done_one}" ]; then
  average_time_spend_format='observing...'
  esti_remain_time_format='estimating...'
else
  average_time_spend_format=$(echo ${average_time_spend} | 
                              awk '{print int($1/86400)"d:"\
                                          int($1%86400/3600)"h:"\
                                          int($1%3600/60)"m:"\
                                          $1%60"s"}')
  ((esti_remain_time=untouched_str_num*average_time_spend/current_coach_num))
  esti_remain_time_format=$(echo ${esti_remain_time} | 
                                awk '{print int($1/86400)"d:"\
                                            int($1%86400/3600)"h:"\
                                            int($1%3600/60)"m:"\
                                            $1%60"s"}')
fi

# Process Summary Output
echo "================== Process Check =================="
printf "${run_state}\n"
printf "  Seed Name                  :  ${seed_name}\n"
if ! ${calc_done}; then
printf "  Working Coach              :  %-5s [%s]\n" "${current_coach_num}"  "${total_coach_num}"
printf "  Working Cores              :  %-5s [%s]\n" "${current_cores}"      "${total_cores}"
fi
printf "  -----------------------------------------------\n"
printf "  Total Str.                 :  ${total_str_num}\n"
printf "  |--Processing Str.         :  %-8s [%s]\n" "${process_str_num}"    "${current_coach_num}"
printf "  |--Untouched Str.          :  %-8s [%s]\n" "${untouched_str_num}"  "${total_str_num}"
printf "  +--Finished Str.           :  %-8s [%s]\n" "${finished_str_num}"   "${total_str_num}"
printf "     |--Succeed Str.         :  %-8s [%s]\n" "${succeed_str_num}"    "${finished_str_num}"
printf "     +--Error Str.           :  %-8s [%s]\n" "${error_str_num}"      "${finished_str_num}"
printf "        |--Bad Init. POSCAR  :  %-8s [%s]\n" "${bad_poscar_str_num}" "${error_str_num}"
printf "        |--Missing CONTCAR   :  %-8s [%s]\n" "${no_contcar_str_num}" "${error_str_num}"
printf "        |--Too huge EDIFF    :  %-8s [%s]\n" "${huge_ediff_str_num}" "${error_str_num}"
printf "        +--Not Converged     :  %-8s [%s]\n" "${not_conv_str_num}"   "${error_str_num}"
printf "  -----------------------------------------------\n"
printf "  Running Time               :  ${total_time_spend_format}\n"
printf "  Average Time Per Str.      :  ${average_time_spend_format}\n"
printf "  Estimated Remaining Time   :  ${esti_remain_time_format}\n"
printf "===================================================\n"

# Useless file remove 
rm VASP.log.temp
