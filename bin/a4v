#!/bin/bash
#

declare -r A4V_PATH=$(cd "$(dirname "$0")";pwd)
declare -r MPI_MACHINEFILE='cores-list'
declare -r INPUT_FILE='a4v.input'

a4v_in_path=$(echo ${PATH} | grep "${A4V_PATH}")
if [ -z "${a4v_in_path}" ]; then 
  echo "[error] a4v is not in the PATH..."
  echo "[tips] Add the following command in your ~/.bashrc:"
  echo "[tips]   export PATH=\"${A4V_PATH}:\${PATH}\""
  echo "[tips] Or simply run:"
  echo "[tips]   echo 'export PATH=\"${A4V_PATH}:\${PATH}\"' >> ~/.bashrc"
  exit 1
fi

if [ ! -e a4v.input ]; then
  echo '[error] Not in a A4V calculation folder!!!'
  exit -1
fi

#===================#
#   Tools Defined   #
#===================#
grep_input_file(){
  keyword="$1"
  res=$(grep "${keyword}" ${INPUT_FILE} 2>/dev/null | tail -1 | 
        awk -F '#' '{print $1}' | awk -F '=' '{print $NF}')
  echo ${res}
}

str_repalce(){
  taget=$1
  res=$2
  file=$3
  sed "s|${taget}|${res}|g" ${file} > .sed.tmp
  mv .sed.tmp ${file}
}

echo "================== Tools Defined =================="
# Clean file script
echo "[do] Create _CLEAN.sh"
cat > _CLEAN.sh << EOF
#!/bin/bash
#
echo "[tips] Make sure the jobs is killed..."
read -p '[input] Press <Enter> to confirm the delete. '
rm -rf COACH-*
rm -r  POSCAR-POOL
rm -r  RES-POOL
rm     TRAIN.record
rm     JOBID.record
rm     IO-BUSY-COACH*.remark
rm     ${task_name}.o*
rm     slurm-*.o*
rm     log-*.out
rm     a4v.*.sh
rm     a4v.allparas
rm     _KILLJOB.sh
rm     _SHOWJOB.sh
rm     _CLEAN.sh
EOF
chmod 740 _CLEAN.sh
echo ""

#===================#
#   Paras Read In   #
#===================#
echo "================== Read In Paras =================="
## Seed Name
default_seed_name=$(ls -1 *.cell | sed 's/.cell//g' | head -1)
if [ -z "${default_seed_name}" ]; then 
  echo '[error] No seed file was found!!!'
  exit 0
fi
echo "[input] Please input the SEED NAME:"
echo "[input] Default: ${default_seed_name}"
read -p '[input]> ' seed_name
if [ -z "${seed_name}" ];then
  seed_name="${default_seed_name}"
fi
printf "[info] Seed name: \033[01;31m${seed_name}\033[0m.\n"
echo ""
## Task Name
default_task_name=$(grep_input_file 'TASK_NAME')
if [ -z "${default_task_name}" ]; then
  default_task_name=a4v-${seed_name}
fi
echo "[input] Please input the TASK NAME:"
echo "[input] Default: ${default_task_name}"
read -p '[input]> ' task_name
if [ -z "${task_name}" ];then
  task_name="${default_task_name}"
fi
printf "[info] Task name: \033[01;31m${task_name}\033[0m.\n"
echo ""
## Intel Module
default_prog_module=$(grep_input_file 'PROG_MODULE')
echo "[input] Please input the INTEL MODULE:"
echo "[input] Default: ${default_prog_module}"
read -p '[input]> ' prog_module
if [ -z "${prog_module}" ];then
  prog_module="${default_prog_module}"
fi
echo "[info] Intel module: ${prog_module}"
mklroot=$(echo "${prog_module}; echo \${MKLROOT}" | bash)
printf "[info] You are using MKL: \033[01;31m${mklroot}\033[0m.\n"
echo ""
## Vasp Program
default_vasp_prog=$(grep_input_file 'VASP_PROG')
echo "[input] Please input the VASP PROG:"
echo "[input] Default: ${default_vasp_prog}"
read -p '[input]> ' vasp_prog
if [ -z "${vasp_prog}" ];then
  vasp_prog="${default_vasp_prog}"
fi
printf "[info] VASP program: \033[01;31m${vasp_prog}\033[0m.\n"
echo ""
## Cores Number Per Node
default_cores_per_node=$(grep_input_file 'CORES_PER_NODE')
echo "[input] Please input the CORES PER NODE."
echo "[input] Default: ${default_cores_per_node}"
read -p '[input]> ' cores_per_node
if [ -z "${cores_per_node}" ];then
  cores_per_node=${default_cores_per_node}
fi
if ! [ "${cores_per_node}" -gt "0" ] 2>/dev/null; then
  echo "[error] CORES PER NODE input invalid..."
  exit 1
fi 
printf "[info] Cores per node: \033[01;31m${cores_per_node}\033[0m.\n"
echo ""
## Nodes Number
default_nodes_num=$(grep_input_file 'NODES_NUM')
echo "[input] Please input the total NODES NUM you are going to use."
echo "[input] Default: ${default_nodes_num}"
read -p '[input]> ' nodes_num
if [ -z "${nodes_num}" ];then
  nodes_num=${default_nodes_num}
fi
if ! [ "${nodes_num}" -gt "0" ] 2>/dev/null; then
  echo "[error] NODES NUM input invalid..."
  exit 1
fi
printf "[info] Nodes number: \033[01;31m${nodes_num}\033[0m.\n"
echo ""
## Cores Number Per Coach
default_cores_per_coach=$(grep_input_file 'CORES_PER_COACH')
echo "[input] Please input the CORES PER COACH."
echo "[input] Default: ${default_cores_per_coach}"
read -p '[input]> ' cores_per_coach
if [ -z "${cores_per_coach}" ];then
  cores_per_coach=${default_cores_per_coach}
fi
if ! [ "${cores_per_coach}" -gt "0" ] 2>/dev/null; then
  echo "[error] CORES PER COACH input invalid..."
  exit 1
fi 
printf "[info] Cores per coach: \033[01;31m${cores_per_coach}\033[0m.\n"
## Coach Number
if [ "${cores_per_node}" -gt "${cores_per_coach}" ]; then
  coaches_per_node=$(echo ${cores_per_node} ${cores_per_coach} | \
                     awk '{print $1/$2}')
  coaches_per_node_is_correct=$(echo ${coaches_per_node} | grep "\.")
  if [ ! -z "${coaches_per_node_is_correct}"]; then 
    echo "[error] the cores_per_coach must be a factor of cores_per_node!!!"
    exit 0
  fi 
  coach_num=$((coaches_per_node*nodes_num))
  nodes_pre_coach=1
  str_nodes_pre_coach="1/${coaches_per_node}"
else
  nodes_pre_coach=$(echo ${cores_per_coach} ${cores_per_node} | \
                    awk '{print $1/$2}')
  nodes_pre_coach_is_correct=$(echo ${nodes_pre_coach} | grep "\.")
  if [ ! -z "${nodes_pre_coach_is_correct}"]; then 
    echo "[error] the cores_per_node must be a factor of cores_per_coach!!!"
    exit 0
  fi 
  coach_num=$((nodes_num/nodes_pre_coach))
  str_nodes_pre_coach="${nodes_pre_coach}"
fi
if ! [ "${coach_num}" -gt "0" ] 2>/dev/null; then
  echo "[error] COACH NUM input invalid..."
  exit 1
fi

printf "[info] Coach number: \033[01;31m${coach_num}\033[0m.\n"
printf "[info] Each coach will use \033[01;31m${str_nodes_pre_coach}\033[0m nodes.\n"
echo ""
## Structure Number
default_str_num=$(grep_input_file 'STR_NUM')
echo "[input] Please input the STR NUM"
echo "[input] Default: ${default_str_num}"
read -p '[input]> ' str_num
if [ -z "${str_num}" ];then
  str_num=${default_str_num}
fi
declare -i str_num=${str_num}
printf "[info] Totally \033[01;31m${str_num}\033[0m structures will be searched.\n"
echo ""
## Symmetry Precise
default_symm_prec=$(grep_input_file 'SYMM_PREC')
if [ -z "${default_symm_prec}" ]; then
  default_symm_prec=0.1
fi
echo "[input] Please input the PRECISION for finding the SYMMETRY."
echo "[input] Default: ${default_symm_prec}"
read -p '[input]> ' symm_prec
if [ -z "${symm_prec}" ];then
  symm_prec=${default_symm_prec}
fi
printf "[info] Using symmetry precision: \033[01;31m${symm_prec}\033[0m.\n"
echo ""
## Kpoints separation
need_read_is_2d=0
incar_index=0
kp_sep_list=""
for incar in ${seed_name}.INCAR-[0-9]*; do
  ((incar_index++))
  kpoints=$(echo ${incar} | sed 's|INCAR|KPOINTS|g')
  if [ -s "${kpoints}" ]; then
    kp_sep_list="${kp_sep_list}null,"
    echo "[info] Using ${kpoints} for ${incar} calualtion."
    continue
  fi
  ((need_read_is_2d++))
  if [ "${need_read_is_2d}" == "1" ]; then
    default_kp_sep_list=$(grep_input_file 'KP_SEP_LIST')
    default_is_2d_material=$(grep_input_file 'IS_2D_MATERIAL')
    echo "[input] Is this a 2D material? (T/F)"
    echo "[input] Default: ${default_is_2d_material}"
    echo "[tips] (Make sure the vaccum layer is in Z direction.)"
    read -p '[input]> ' is_2d_material
    if [ -z "${is_2d_material}" ];then
      is_2d_material=${default_is_2d_material}
    fi
    is_2d_material=$(echo ${is_2d_material} | awk '{print toupper($0)}')
    if [ "${is_2d_material}" != "T" ] && [ "${is_2d_material}" != "F" ]; then
      echo "[error] input invalid, please input 'T'(true) or 'F'(false)..."
      exit 1
    fi
    printf "[info] Is a 2D Material: \033[01;31m${is_2d_material}\033[0m.\n"
    echo ""
  fi
  default_kp_sep=$(echo ${default_kp_sep_list} | cut -d ',' -f ${incar_index})
  read -p "[input] KPSEP for ${incar},[${default_kp_sep}]> " kp_sep
  if [ -z "${kp_sep}" ];then
    kp_sep=${default_kp_sep}
  fi
  kp_sep_list="${kp_sep_list}${kp_sep},"
done
kp_sep_list=$(echo ${kp_sep_list} | sed s/[[:space:]]//g  | sed 's/.$//')
printf "[info] Using kpoints separation list: \033[01;31m[${kp_sep_list}]\033[0m.\n"
echo ""
## System type
default_sys_type=$(grep_input_file 'SYS_TYPE')
echo "[input] Please input the SYS TYPE:"
echo "[input] Default: ${default_sys_type}"
read -p '[input]> ' sys_type
if [ -z "${sys_type}" ];then
  sys_type="${default_sys_type}"
fi
is_correct_sys_type=$(echo 'pbs,slurm,nscc,direct' | grep ${sys_type})
if [ -z "${is_correct_sys_type}" ];then
  echo "[error] Invalid system type."
  echo "[tips] choice one from: pbs, slurm, nscc, direct."
  exit 1
fi
printf "[info] System type: \033[01;31m${sys_type}\033[0m.\n"
echo ""
## PBS walltime
if [ "${sys_type}" == "pbs" ]; then
  default_job_walltime=$(grep_input_file 'JOB_WALLTIME')
  if ! [ "${default_job_walltime}" -gt "0" ] 2>/dev/null; then
    default_job_walltime=96
  fi
  echo "[input] Please input the Max Time Limit for the job."
  echo "[input] Default: ${default_job_walltime} (h)"
  read -p '[input]> ' job_walltime
  if [ -z "${job_walltime}" ];then
    job_walltime="${default_job_walltime}"
  fi
  printf "[info] Using job walltime: \033[01;31m${job_walltime}\033[0m hours.\n"
  echo ""
fi
## Job Queue
if [ "${sys_type}" != "direct" ]; then
  default_job_queue=$(grep_input_file 'JOB_QUEUE')
  if [ -z "${default_job_queue}" ]; then
    default_job_queue='unset_job_queue'
  fi
  echo "[input] Please input job queue."
  echo "[input] Default: ${default_job_queue}"
  read -p '[input]> ' job_queue
  if [ -z "${job_queue}" ];then
    job_queue="${default_job_queue}"
  fi
  printf "[info] Using job queue: \033[01;31m${job_queue}\033[0m.\n"
  echo ""
fi
## VASP walltime
default_vasp_walltime=$(grep_input_file 'VASP_WALLTIME')
if ! [ "${default_vasp_walltime}" -gt "0" ] 2>/dev/null; then
  default_vasp_walltime=43200
fi
echo "[input] Please input the Max Time Limit for single VASP Calculation."
echo "[input] Default: ${default_vasp_walltime} (s)"
read -p '[input]> ' vasp_walltime
if [ -z "${vasp_walltime}" ];then
  vasp_walltime="${default_vasp_walltime}"
fi
printf "[info] Using VASP walltime: \033[01;31m${vasp_walltime}\033[0m seconds.\n"
echo ""
## Delete Calculation Files
default_keep_calc_details=$(grep_input_file 'KEEP_CALC_DETAILS')
if [ -z "${default_keep_calc_details}" ];then
  default_keep_calc_details='F'
fi 
echo "[input] Keep all calculation details? (T/F)"
echo "[input] Default: ${default_keep_calc_details}"
read -p '[input]> ' keep_calc_details
if [ -z "${keep_calc_details}" ];then
  keep_calc_details="${default_keep_calc_details}"
fi
keep_calc_details=$(echo ${keep_calc_details} | awk '{print toupper($0)}')
printf "[info] Keep calculation details: \033[01;31m${keep_calc_details}\033[0m.\n"
echo ""

#======================#
#   Paras Write Down   #
#======================#
echo "================== Record the Paras =================="
echo "[do] Generate a4v.allparas"
cat > a4v.allparas << EOF
A4V_PATH          = ${A4V_PATH}
PBS_SUBMIT_SCRIPT = ${PBS_SUBMIT_SCRIPT}
MPI_MACHINEFILE   = ${MPI_MACHINEFILE}
INPUT_FILE        = ${INPUT_FILE}
#
SEED_NAME         = ${seed_name}
TASK_NAME         = ${task_name}
PROG_MODULE       = ${prog_module}
VASP_PROG         = ${vasp_prog}
NODES_NUM         = ${nodes_num}
CORES_PER_NODE    = ${cores_per_node}
CORES_PER_COACH   = ${cores_per_coach}
NODES_PER_COACH   = ${nodes_pre_coach}
STR_NUM           = ${str_num}
IS_2D_MATERIAL    = ${is_2d_material}
KP_SEP_LIST       = ${kp_sep_list}
SYMM_PREC         = ${symm_prec}
SYS_TYPE          = ${sys_type}
JOB_WALLTIME      = ${job_walltime}
JOB_QUEUE         = ${job_queue}
VASP_WALLTIME     = ${vasp_walltime}
KEEP_CALC_DETAILS = ${keep_calc_details}
EOF
echo "[do] Update a4v.input"
cat > a4v.input << EOF
SEED_NAME         = ${seed_name}
TASK_NAME         = ${task_name}
PROG_MODULE       = ${prog_module}
VASP_PROG         = ${vasp_prog}
NODES_NUM         = ${nodes_num}
CORES_PER_NODE    = ${cores_per_node}
CORES_PER_COACH   = ${cores_per_coach}
STR_NUM           = ${str_num}
IS_2D_MATERIAL    = ${is_2d_material}
KP_SEP_LIST       = ${kp_sep_list}
SYMM_PREC         = ${symm_prec}
SYS_TYPE          = ${sys_type}
JOB_WALLTIME      = ${job_walltime}
JOB_QUEUE         = ${job_queue}
VASP_WALLTIME     = ${vasp_walltime}
KEEP_CALC_DETAILS = ${keep_calc_details}
EOF
echo ""

#================#
#   Envs Check   #
#================#
echo "================== Check Files =================="
## Check AIRSS
echo "[do] Checking AIRSS..."
nessary_modules='buildcell cabal cryan cellsym cell2pos genkp genpos a4v-prg a4v-res'
for nessary_module in ${nessary_modules}; do
  if [ ! -e ${A4V_PATH}/${nessary_module} ]; then 
    echo "[error] '${A4V_PATH}/${nessary_module}' do not exist..."
    exit 1
  fi
done
echo "[info] PASS ::AIRSS:: PASS"
echo ""
## Check VASP
echo "[do] Checking VASP..."
if [ ! -e ${vasp_prog} ]; then 
  echo "[error] '${vasp_prog}' do not exist..."
  exit 0
fi
echo "[info] PASS ::VASP:: PASS"
echo ""
## Check INCAR
echo "[do] Checking INCAR..."
check_incar_file=$(echo ${seed_name}.INCAR-[0-9]* | awk '{print $1}')
if [ ! -e ${check_incar_file} ]; then
  echo "[error] ${seed_name}.INCAR-[0-9]* is required..." 
  exit 1
fi
incar_num=$(ls ${seed_name}.INCAR-[0-9]* | wc -w)
incar_file_index_list=$(ls -1 ${seed_name}.INCAR-[0-9]* | 
                        awk -F '-' '{print $NF}' | sort -n | xargs)
incar_index=0
for incar_file_index in ${incar_file_index_list}; do
  ((incar_index++))
  if [ "${incar_index}" != "${incar_file_index}" ]; then
    echo "[info] Name: ${seed_name}.INCAR-${incar_file_index} are not correct!"
    echo "[do] Rename it with ${seed_name}.INCAR-${incar_index}..."
    mv ${seed_name}.INCAR-${incar_file_index} ${seed_name}.INCAR-${incar_index}
    if [ -e ${seed_name}.KPOINTS-${incar_index} ]; then
      rm ${seed_name}.KPOINTS-${incar_index}
    fi
    if [ -e ${seed_name}.KPOINTS-${incar_file_index} ]; then
      mv ${seed_name}.KPOINTS-${incar_file_index} \
         ${seed_name}.KPOINTS-${incar_index}
    fi
  else
   echo "[info] ${seed_name}.INCAR-${incar_file_index} pass..."
  fi
done
echo "[info] Totally ${incar_num} INCAR was used for relazation."
echo "[info] PASS ::INCAR:: PASS"
echo ""
## Generate TEMP POSCAR
echo "[do] Generating Temporary POSCAR for POTCAR check..."
buildcell < ${seed_name}.cell > CELL.TEMP 2>&1
cabal cell poscar < CELL.TEMP > POSCAR.TEMP
## Check KPOINTS
echo "[do] Checking KPOINTS..."
for ((incar_index=1; incar_index<=incar_num; incar_index++)); do
  if [ ! -s ${seed_name}.KPOINTS-${incar_index} ]; then
    kp_sep=$(echo ${kp_sep_list} | cut -d ',' -f ${incar_index})
    if [ -z "${kp_sep}" ] || [ "null"  == "${kp_sep}" ]; then 
      echo "[error] ${seed_name}.KPOINTS-${incar_index} not exist..."
      exit 1
    fi
    mv POSCAR.TEMP POSCAR
    if [ "${is_2d_material}" == "T" ]; then
      genkp -s ${kp_sep} -f
    else
      genkp -s ${kp_sep}
    fi
    mv POSCAR POSCAR.TEMP
    mv KPOINTS KPOINTS.TEMP
    kp_num=$(sed -n '4p' KPOINTS.TEMP | awk '{print $1","$2","$3}')
    echo "[info] Using KPSEP=${kp_sep} for ${seed_name}.INCAR-${incar_index} calculation with kp-num: [${kp_num}]"
  else
    kp_num=$(sed -n '4p' ${seed_name}.KPOINTS-${incar_index} | 
             awk '{print $1","$2","$3}')
    echo "[info] Using ${seed_name}.KPOINTS-${incar_index} for ${seed_name}.INCAR-${incar_index} calculation with kp-num: [${kp_num}]"
  fi
done
echo "[info] PASS ::KPOINTS:: PASS"
echo ""
## Check POTCAR
echo "[do] Checking POTCAR..." 
if [ ! -e ${seed_name}.POTCAR ]; then 
  echo "[error] POTCAR do not exist..."
  exit 0
fi
element_order_potcar=$(echo $(grep VRH ${seed_name}.POTCAR | 
                              cut -d '=' -f 2 | 
                              cut -d ':' -f 1))
element_pickup=$(echo ${element_order_potcar} | cut -d ' ' -f 1)
element_order_poscar=$(echo $(sed -n '6p' POSCAR.TEMP | 
                       grep "${element_pickup}"))
rm *.TEMP
if [ "${element_order_potcar}" == "${element_order_poscar}" ]; then 
  echo "[info] POTCAR and POSCAR element match well."
else 
  echo "[error] Elements of POTCAR and POSCAR do not match!!!"
  exit 0
fi 
echo "[info] PASS ::POTCAR:: PASS"
echo ""

#===========================#
#   Prepare Before Submit   #
#===========================#
## Generate POSCAR pool
echo "================== Prepare Before Submit =================="
if [ ! -e POSCAR-POOL ]; then
  echo "[do] Creating POSCAR-POOL..."
  mkdir POSCAR-POOL
else
  echo "[info] POSCAR-POOL already exist, skip the mkdir."
fi
cd POSCAR-POOL
cp ../${seed_name}.cell .
genpos ${seed_name} ${str_num}
gen_str_num=$(find . -maxdepth 1 -name "*.vasp" | wc -l)
echo "[info] There are ${gen_str_num} structures in the POSCAR-POOL, now."
cd ..
## Make the Result directory
if [ ! -e RES-POOL ]; then
  echo '[do] Creating RES-POOL...'
  mkdir RES-POOL
else
  echo '[info] RES-POOL already exist, skip the mkdir.'
fi
echo ""

#=================#
#   Submit Jobs   #
#=================#
echo "================== Submit Jobs =================="
echo "[do] Prepare the submitting files..."
vasp_calc_script="${A4V_PATH}/vasp_submit/vasp_calc_script.sh"
submit_script="${A4V_PATH}/vasp_submit/submit_${sys_type}.sh"
curr_sub_scrp="a4v.${sys_type}.sh"
cp ${submit_script} ${curr_sub_scrp}
if [ "${cores_per_node}" -gt "${cores_per_coach}" ]; then
  ppn=${cores_per_coach}
else
  ppn=${cores_per_node}
fi
str_repalce "__task_name__"        "${task_name}__tag__" "${curr_sub_scrp}"
str_repalce "__nodes_num__"        "${nodes_pre_coach}"  "${curr_sub_scrp}"
str_repalce "__ppn__"              "${ppn}"              "${curr_sub_scrp}"
str_repalce "__job_walltime__"     "${job_walltime}"     "${curr_sub_scrp}"
str_repalce "__mpi_machinefile__"  "${MPI_MACHINEFILE}"  "${curr_sub_scrp}"
str_repalce "__vasp_calc_script__" "${vasp_calc_script}" "${curr_sub_scrp}"
str_repalce "__cores_per_coach__"  "${cores_per_coach}"  "${curr_sub_scrp}"
str_repalce "__vasp_prog__"        "${vasp_prog}"        "${curr_sub_scrp}"
str_repalce "__prog_module__"      "${prog_module}"      "${curr_sub_scrp}"
str_repalce "__vasp_walltime__"    "${vasp_walltime}"    "${curr_sub_scrp}"
if [ "${job_queue}" == "unset-queue" ]; then 
  str_repalce '#PBS -q' '##PBS -q' "${curr_sub_scrp}"
  str_repalce '#SBATCH -p' '##SBATCH -p' "${curr_sub_scrp}"
else
  str_repalce "__job_queue__" "${job_queue}" "${curr_sub_scrp}"
fi
case ${sys_type} in
'pbs')
  submit_command="qsub ${curr_sub_scrp}"
  kill_command='qdel'
  ;;
'slurm')
  submit_command="sbatch ${curr_sub_scrp}"
  kill_command='scancel'
  ;;
'nscc')
  submit_command="yhbatch ${curr_sub_scrp}"
  kill_command='yhcancel'
  ;;
'direct')
  submit_command="nohup bash ${curr_sub_scrp} < /dev/null >> ../log-${task_name}.out 2>&1 & echo \$!"
  kill_command='kill -TERM --'
  ;;
*)
  echo "[error] No matched system..."
  exit 1
  ;;
esac
echo "[done] ${curr_sub_scrp}"
read -p "Press <Enter> to confirm the submition..."
echo ""
# Genrate Kill job script
echo "[do] Generating _KILLJOB.sh"
case ${sys_type} in
  'direct')
  echo '#!/bin/bash'                             > _KILLJOB.sh
  echo '#'                                      >> _KILLJOB.sh
  echo "jobs_id=\$(cat JOBID.record | awk -F '.' '{print \$1}' | uniq | xargs)" >> _KILLJOB.sh
  echo 'for job_id in ${jobs_id}; do'           >> _KILLJOB.sh
  echo '  echo "'${kill_command}' -${job_id}"'  >> _KILLJOB.sh
  echo "${kill_command}"' -${job_id}'           >> _KILLJOB.sh
  echo 'done'                                   >> _KILLJOB.sh
  echo '#!/bin/bash'                             > _SHOWJOB.sh
  echo '#'                                      >> _SHOWJOB.sh
  echo "pids=\$(cat JOBID.record | awk -F '.' '{print \$2}' | awk '{print \$1}' | xargs)" >> _SHOWJOB.sh
  echo "ps x -o \"%p  %r   %a %t\" > .jobs.temp"  >> _SHOWJOB.sh
  echo "printf \"%-11s\" 'NO.'; head -1 .jobs.temp"   >> _SHOWJOB.sh
  echo 'for pid in ${pids}; do'                 >> _SHOWJOB.sh
  echo "  printf \"%-11s\" \$(cat JOBID.record | grep \"\\.\${pid}\"| awk '{print \$2\" \"}')"   >> _SHOWJOB.sh
  echo "  declare -i job_line=\$(cat .jobs.temp | awk '{print \$1}' | grep -n \${pid} | cut -d ':' -f 1)" >> _SHOWJOB.sh
  echo '  if [ "${job_line}" == "0" ]; then '   >> _SHOWJOB.sh
  echo '    echo "-------------------------- STOP --------------------------" '    >> _SHOWJOB.sh
  echo '  else '                                >> _SHOWJOB.sh
  echo "    cat .jobs.temp | sed -n \"\${job_line}p\" " >> _SHOWJOB.sh
  echo '  fi '                                  >> _SHOWJOB.sh
  echo 'done'                                   >> _SHOWJOB.sh
  echo 'rm .jobs.temp'                          >> _SHOWJOB.sh
  chmod 740 _SHOWJOB.sh
  ;;
*) 
  echo '#!/bin/bash'                           > _KILLJOB.sh
  echo '#'                                    >> _KILLJOB.sh
  echo 'job_id=$(cat JOBID.record | xargs)'   >> _KILLJOB.sh
  echo 'echo "'${kill_command}' ${job_id}"'   >> _KILLJOB.sh
  echo "${kill_command}"' ${job_id}'          >> _KILLJOB.sh
  ;;
esac
chmod 740 _KILLJOB.sh
# Submit the jobs
echo "[do] Submitting the jobs..."
cat /dev/null > JOBID.record
declare -i current_max_coach_index=$(ls -1 . | grep 'COACH-' | 
                                     awk -F '-' '{print $NF}' | 
                                     sort -n | tail -1)
for ((gen_index=1; gen_index<=${coach_num}; gen_index++)); do
  ((coach_index=current_max_coach_index+gen_index))
  echo "[do] Creating COACH-${coach_index}..."
  mkdir COACH-${coach_index}
  cd COACH-${coach_index}
  cp ../${curr_sub_scrp} .
  str_repalce "__tag__" "-c${coach_index}" ${curr_sub_scrp}
  cp ../a4v.allparas .
  cp ../${seed_name}.POTCAR POTCAR
  cp ../${seed_name}.INCAR-[0-9]* .
  for incar in ${seed_name}.INCAR-*; do
    mv ${incar} ${incar##*\.}
  done
  cp ../${seed_name}.KPOINTS-[0-9]* . 2>/dev/null
  for kpoints in ${seed_name}.KPOINTS-*; do
    mv ${kpoints} ${kpoints##*\.} 2>/dev/null
  done
  echo " |--[sub-do] ${submit_command}"
  case ${sys_type} in
  'direct')
    sjob_id=$(echo "${submit_command}" | bash)
    ps x -o  "%p %r" > .psxopr.temp
    job_id_line=$(cat .psxopr.temp | awk '{print " "$1" "}' | grep -n " ${sjob_id} " | cut -d ':' -f 1)
    job_id="$(sed -n "${job_id_line}p" .psxopr.temp | awk '{print $2}').${sjob_id}  COACH-${coach_index}"
    rm .psxopr.temp
    ;;
  'nscc' | 'slurm') 
    job_id=$(${submit_command})
    job_id=$(echo ${job_id} | awk '{print $NF}')
    ;;
  *)
    job_id=$(${submit_command})
    ;;
  esac
  echo ${job_id} >> ../JOBID.record
  echo " +--[info] Job ID: ${job_id}"
  cd ..
  sleep 1
done
echo '[done]'
echo ""
echo "============== a4v Over =============="

